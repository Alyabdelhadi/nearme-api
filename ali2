            binding.noResultPlaces.visibility = View.VISIBLE
        }
    }
    * Â© 2023, NI Arabia FZCO
    */

    package com.niarabia.clubr.fragments

    import android.os.Bundle
    import android.util.Log
    import android.view.LayoutInflater
    import android.view.Menu
    import android.view.View
    import android.view.ViewGroup
    import android.widget.Toast
    import androidx.fragment.app.Fragment
    import androidx.lifecycle.Observer
    import androidx.recyclerview.widget.LinearLayoutManager
    import androidx.recyclerview.widget.RecyclerView
    import com.niarabia.clubr.adapters.PlacesAdapter
    import com.niarabia.clubr.data.model.Places
    import com.niarabia.clubr.data.model.PlacesParent
    import com.niarabia.clubr.data.model.ProgressBarModel
    import com.niarabia.clubr.databinding.FragmentPlacesListingsBinding
    import com.niarabia.clubr.utls.global.GlobalFun
    import com.niarabia.clubr.viewmodels.MainViewModel
    import org.koin.androidx.viewmodel.ext.android.viewModel


    /**
     * A simple [Fragment] subclass.
     * Use the [PlacesListings.newInstance] factory method to
     * create an instance of this fragment.
     */
    class PlacesListings : Fragment() {
        private lateinit var recyclerView: RecyclerView
        private var batchSize = 3
        private var _binding: FragmentPlacesListingsBinding? = null
        private var isLoading = false
        private val pageSize: Int = 3
        private var noMoreMatches: Boolean = false

        private val binding get() = _binding!!
        private var dataList = mutableListOf<PlacesParent>()
        private var after: Int = 0

        private val viewModel by viewModel<MainViewModel>()

        override fun onCreateView(
            inflater: LayoutInflater, container: ViewGroup?,
            savedInstanceState: Bundle?
        ): View? {

            _binding = FragmentPlacesListingsBinding.inflate(inflater, container, false)


            recyclerView = binding.menuRecyclerView
            recyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {
                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                    super.onScrollStateChanged(recyclerView, newState)
                    if (!recyclerView.canScrollVertically(1) && newState == RecyclerView.SCROLL_STATE_IDLE) {
                        Log.d("-----", "end")
                        loadMore()
                    }
                }
            })

            viewModel.getAllPlaces(pageSize, after)

            return binding.root
        }


        override fun onResume() {
            super.onResume()
        }


        override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
            super.onViewCreated(view, savedInstanceState)
//
            viewModel.placesList.observe(viewLifecycleOwner, Observer { newData ->
                newData?.let {
                    // Check if it's a "load more" operation
                    if (isLoading) {
                        // Add the new data to your existing dataList
                        dataList.addAll(it)

                        // Reset the flag after handling the "load more" operation
                        isLoading = false
                    } else {
                        // Clear the existing data and add the new data
                        dataList.clear()
                        dataList.addAll(it)

                        setupRecyclerView()
                    }
                }
            })
            viewModel.errorText.observe(viewLifecycleOwner, Observer {
                if (it != null && it != "") {
                    GlobalFun.snack(requireActivity(), it)
                    viewModel.errorText.value = "" //reset value
                }
            })
            viewModel.progressbar.observe(viewLifecycleOwner, Observer {
                if (it != null) {
                    binding.progress = it
                    viewModel.progressbar.value = null
                }
            })
        }

        override fun onDestroyView() {
            super.onDestroyView()
            _binding = null
        }


        //region Rv----
        private fun setupRecyclerView() {
            val placesMenuAdapter = PlacesAdapter {
            }

            placesMenuAdapter.setData(dataList)

            binding.adapter = placesMenuAdapter
            binding.menuRecyclerView.layoutManager = LinearLayoutManager(requireActivity())



            binding.progressPlaces.visibility = View.GONE
            if (dataList.isEmpty()) {



                private fun loadMore() {
        if (!isLoading) {
            isLoading = true

            // Get the current 'after' value and calculate the new 'after' value
            val currentAfter = viewModel.getCurrentAfter()
            val newAfter = currentAfter + pageSize

            // Call the ViewModel function to get more places with the updated 'after' value
            viewModel.getAllPlaces(pageSize, newAfter)
        }
    }

    private fun updateAdapter() {
        val placesMenuAdapter = binding.adapter as PlacesAdapter

        placesMenuAdapter.setData(dataList)

        placesMenuAdapter.notifyItemRangeInserted(after, dataList.size - 1)


        binding.progressPlaces.visibility = View.GONE
        binding.noResultPlaces.visibility = if (dataList.isEmpty()) View.VISIBLE else View.GONE
    }



    //region option menu
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setHasOptionsMenu(true)
    }

    override fun onPrepareOptionsMenu(menu: Menu) {
        menu.clear() //hide all option menu items
        super.onPrepareOptionsMenu(menu)
    }
    //endregion
}
